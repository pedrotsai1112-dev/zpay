# ZPay App - Cursor AI 開發規則

## 專案概述
ZPay 是一個 Flutter 金融支付 App，具備轉帳、分帳、好友管理功能。

## 代碼風格與架構
- **語言**: Dart (Flutter 3.9+)
- **狀態管理**: flutter_riverpod
- **路由**: go_router
- **架構**: Feature-first + Clean Architecture
- **UI**: Material 3 + 自定義設計系統

## 目錄結構
```
lib/
├── features/           # 功能模組
│   ├── pay/           # 轉帳功能
│   ├── split/         # 分帳功能
│   ├── friends/       # 好友管理
│   └── auth/          # 認證功能（未來）
├── shared/            # 共享組件
│   ├── widgets/       # 通用 UI 組件
│   ├── services/      # 服務層
│   ├── models/        # 數據模型
│   └── utils/         # 工具函數
├── core/              # 核心配置
│   ├── theme/         # 主題配置
│   ├── router/        # 路由配置
│   └── constants/     # 常量定義
└── main.dart          # 入口文件
```

## 開發準則

### 🔴 CRITICAL: 測試驅動開發 (TDD) 流程
**所有開發工作必須遵循以下流程：**
1. **RED**: 先寫測試（測試會失敗，因為功能還不存在）
2. **GREEN**: 寫最少的代碼讓測試通過
3. **REFACTOR**: 重構代碼，保持測試通過

**具體步驟：**
```
flutter test                    # 確保現有測試通過
寫新功能的測試 → 運行測試（應該失敗）
寫實現代碼 → 運行測試
重複修改代碼直到測試通過
重構和優化代碼 → 確保測試仍然通過
```

**禁止行為：**
- ❌ 在沒有測試的情況下寫新功能
- ❌ 寫測試之前先寫實現代碼
- ❌ 提交沒有通過測試的代碼

### 1. 代碼質量
- 使用 `flutter_lints` 嚴格檢查
- 函數長度不超過 20 行
- 類文件不超過 200 行
- 100% null safety
- 優先使用 const 構造函數

### 2. 命名規範
- 文件名: snake_case (pay_page.dart)
- 類名: PascalCase (PayPage)
- 變量/函數: camelCase (isLoading)
- 常量: SCREAMING_SNAKE_CASE (API_BASE_URL)

### 3. UI/UX 設計原則
- Material 3 設計語言
- 響應式設計 (手機優先)
- 無障礙支持 (Semantics)
- 流暢動畫 (60fps)
- 一致的間距系統 (8, 16, 24, 32...)

### 4. 性能優化
- 優先使用 StatelessWidget
- 適當使用 const 構造函數
- 列表使用 ListView.builder
- 圖片使用 CachedNetworkImage
- 避免 build 方法中的複雜邏輯

### 5. 錯誤處理
- 使用 Result<T, E> 模式
- 用戶友好的錯誤信息
- 適當的 loading 狀態
- 網絡異常重試機制

### 6. 測試策略 (TDD 核心)
**測試優先級：**
1. **單元測試**: 每個函數、類、服務都必須有測試（目標覆蓋率 > 90%）
2. **Widget 測試**: 每個自定義 Widget 都必須有測試
3. **集成測試**: 主要用戶流程和功能整合

**測試文件結構：**
```
test/
├── unit/              # 單元測試
│   ├── models/        # 數據模型測試
│   ├── services/      # 服務層測試
│   └── utils/         # 工具函數測試
├── widget/            # Widget 測試
│   ├── pay/          # 轉帳相關 Widget
│   ├── split/        # 分帳相關 Widget
│   └── friends/      # 好友相關 Widget
└── integration/       # 集成測試
    ├── pay_flow_test.dart
    ├── split_flow_test.dart
    └── friends_flow_test.dart
```

**測試命令：**
- `flutter test` - 運行所有測試
- `flutter test --coverage` - 生成覆蓋率報告
- `flutter test test/unit/` - 只運行單元測試
- `flutter test test/widget/` - 只運行 Widget 測試

## 特定功能指引

### 轉帳功能 (Pay)
- QR Code 生成/掃描
- 金額輸入驗證
- 支付確認流程
- 交易記錄

### 分帳功能 (Split)
- AI 自然語言處理
- 多人分帳計算
- 結果預覽確認
- 發送分帳請求

### 好友管理 (Friends)
- QR Code 加好友
- 好友列表管理
- 群組功能
- 分帳歷史

## AI 開發建議
1. 編寫代碼時請確保類型安全
2. 優先使用現有的 widgets 和 features
3. 新增功能請遵循既有架構模式
4. 始終考慮用戶體驗和性能
5. 代碼要有適當的註釋，特別是複雜邏輯
6. 使用中文註釋，便於團隊理解

## 🎯 技術領導協作指引

### GitHub 代碼借鑑策略（台灣金融環境專用）
**針對台灣金融市場的技術參考重點：**

1. **台灣金融 API 整合參考**：
   - 玉山銀行 Open Banking API 示例
   - 中華郵政 API 串接最佳實踐
   - 台新銀行數位金融服務參考
   - 街口支付、LINE Pay 台灣在地化實作

2. **台灣法規合規參考**：
   - 金管會數位金融規範實作指引
   - 個人資料保護法 (PDPA) 合規設計
   - 電子支付機構管理條例技術要求
   - KYC/AML 台灣監管要求實作

3. **在地化 UI/UX 模式**：
   - 台灣使用者習慣的支付流程
   - 繁體中文界面最佳實踐
   - 台灣常用的 QR Code 規範 (如悠遊付、一卡通)
   - 銀行轉帳 UI 在地化設計

**台灣金融環境特殊考量：**
- 須符合金管會電子支付相關法規
- 支援台灣主流銀行 API (玉山、中信、台新、國泰世華等)
- 整合台灣 FinTech 生態系 (悠遊卡、一卡通、街口等)
- 遵循台灣資安法規與個資法要求

**需要協助時的具體步驟：**
當我識別到需要參考代碼時，會提供：
- 台灣金融機構技術文件或開源項目地址
- 法規合規要求的技術實作範例
- 在地化功能的最佳實踐模式
- 如何整合到 ZPay 並符合台灣法規的建議

### Cursor 功能最大化利用
**請幫我開啟以下 Cursor 功能來提升開發能力：**

1. **AI Agent 設定**：
   - 設定專門的 Flutter/Dart 開發 Agent
   - 配置金融應用安全最佳實踐
   - 設定 TDD 工作流程助手

2. **代碼分析增強**：
   - 開啟智能重構建議
   - 設定性能分析提醒
   - 配置安全漏洞檢測

3. **協作工具**：
   - 設定代碼審查助手
   - 配置自動測試運行
   - 開啟智能註釋生成

## 版本控制
- 主分支: main
- 功能分支: feature/feature-name
- 修復分支: fix/issue-description
- Commit 信息使用中文，格式: [類型] 簡短描述

## 部署環境
- 開發: Flutter debug mode
- 測試: Flutter profile mode  
- 生產: Flutter release mode
- 平台: iOS + Android

請在開發過程中嚴格遵循以上規則，確保代碼質量和項目一致性。
